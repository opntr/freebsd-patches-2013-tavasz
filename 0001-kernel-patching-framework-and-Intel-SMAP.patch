From 19133f44ea74126d415c28288b1b914c085293d2 Mon Sep 17 00:00:00 2001
From: Oliver Pinter <oliver.pntr@gmail.com>
Date: Mon, 25 Mar 2013 18:08:06 +0100
Subject: [PATCH] kernel patching framework and Intel SMAP

added kernel patching framework

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

hook ksp_kpatch

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

fix missing KASSERT prototype

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

include opt_ksp.h

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

fix casting; fix structure subelement name

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

fix uninitialized patch_count

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

added new line to end of debug outputs

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

use linker_set when it's available

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

Revert "use linker_set when it's available"

chicken-egg problem, at this time, there are no linker_kernel_file

This reverts commit 7b7da9990323280674d8010ef44805e6a7be5499.

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

linker hack to store kpatch metadatas

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

remove a dirty hacks and skip when there are no patches

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

added basic SMAP support

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

style - remove spaces from support.S@amd64

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

hook SMAP support into the kernel

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

fix header guard, added copyright, remove some clang_complete related hack

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

make it compilable - dirty clang related hack

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

fix label collision in asmacros

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

generalize pointer debug

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

working binary patching

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

removed double included cdefs.h, RCSID fix, remove opt_ksp.h

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

removed {disable,enable}_intr() from ksp_kpatch

Suggested by kib@, while this possibly break the boot process.
The ksp_kpatch called from hammer_time(), where the interrupsts
are disabled.

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

removed clflush() from ksp_kpatch_apply()

Not needed, see Intel SDM vol.3 8.1.3 and 11.6.
Suggersted by kib@freebsd

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

fix identcpu SMAP section

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

reenable dprintf ...

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

fixed stac/clac in some functions in support.S

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

added buzero(addr, size) to support.S

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

readded KSP_KPATCH_DEBUG

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

Revert "added buzero(addr, size) to support.S"

Previously used buzero() in exec_copyin_args(...)@kern.exec.c

This reverts commit fcf6be717447d3ae8939d27f214c249e77b26733.

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

remove confusing NOT_BROKEN_CLANG_ASSEMBLER section from ksp_kpatch_smap.h

this was introduced to fix clang's crash

cc -c -O2 -pipe -fno-strict-aliasing -march=core2 -std=c99 -g -Wall
 -Wredundant-decls -Wnested-externs -Wstrict-prototypes
 -Wmissing-prototypes -Wpointer-arith -Winline -Wcast-qual  -Wundef
 -Wno-pointer-sign -fformat-extensions  -Wmissing-include-dirs
 -fdiagnostics-show-option  -Wno-error-tautological-compare
 -Wno-error-empty-body  -Wno-error-parentheses-equality -nostdinc  -I.
 -I/usr/home/op/git/freebsd-base.git.http/sys
 -I/usr/home/op/git/freebsd-base.git.http/sys/contrib/altq -D_KERNEL
 -DHAVE_KERNEL_OPTION_HEADERS -include opt_global.h
 -fno-omit-frame-pointer -mno-aes -mno-avx -mcmodel=kernel
 -mno-red-zone -mno-mmx -mno-sse -msoft-float
 -fno-asynchronous-unwind-tables -ffreestanding -fstack-protector
 -Werror  /usr/home/op/git/freebsd-base.git.http/sys/x86/acpica/acpi_wakeup.c
 invalid fixup kind!
 UNREACHABLE executed at
 /usr/home/op/git/freebsd-base.git.http/lib/clang/libllvmx86desc/../../../contrib/llvm/lib/Target/X86/MCTargetDesc/X86ELFObjectWriter.cpp:55!
 Stack dump:
 0.      Program arguments:
 /usr/obj/usr/home/op/git/freebsd-base.git.http/tmp/usr/bin/cc -cc1as
 -triple x86_64-unknown-freebsd10.0 -filetype obj -target-cpu core2 -g
 -o support.o /tmp/support-VmOpeM.s
 1.      Program arguments: -triple x86_64-unknown-freebsd10.0
 -filetype obj -target-cpu core2 -g -o support.o /tmp/support-VmOpeM.s
 cc: error: unable to execute command: Abort trap (core dumped)
 cc: error: clang integrated assembler command failed due to signal
 (use -v to see invocation)
 FreeBSD clang version 3.2 (tags/RELEASE_32/final 170710) 20121221
 Target: x86_64-unknown-freebsd10.0
 Thread model: posix
 cc: note: diagnostic msg: PLEASE submit a bug report to
 http://llvm.org/bugs/ and include the crash backtrace, preprocessed
 source, and associated run script.
 cc: note: diagnostic msg: Error generating preprocessed source(s).
 *** [support.o] Error code 254
 1 error
 *** [buildkernel] Error code 2
 1 error
 *** [buildkernel] Error code 2
 1 error

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

fixed some remark from kib

--8<--
Among the big things about the patch, I could note two, one is subjective.

 First, I do not think that the patch is complete or correct, yet again.
 Lets look at the copyout. The patch adds the kpatch points for the normal
 control flow. But assume that the passed usermode address is not mapped,
 or have wrong permissions. Then, the flow would be broken into the
 trap handler, and then the control is passed to the copyout_fault, as
 recorded in the curpcb->pcb_onfault.

 The AC was set during the execution of the instruction which caused the
 trap, and it will be set when the control jumps to pcb_onfault pointer.
 As result, AC enable leaks to the undefinite scope of the post-fault
 code.

 It might be that the trap handler is executed with the AC flag set as
 well. If traps inherit the AC setting, so could the interrupt handlers,
 if interrupt is received while the corresponding instruction is executed.

 Also, you do stac/slac around single instruction, but this is not consistent.
 E.g. in copyinstr, you enable the usermode access both for lodsb instruction,
 which reads from usermode (and which is correct) and for stosb instruction,
 which writes to the kernel space, and there AC should not be enabled,
 generally speaking.
--8<--

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

fixed comment in ksp_kpatch_smap.h

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>

remove 32bit expanded nops from comment in ksp_kpatch_instructions.h

suggested by: kib@

Signed-off-by: Oliver Pinter <oliver.pntr@gmail.com>
---
 sys/amd64/amd64/identcpu.c                  |   3 +-
 sys/amd64/amd64/initcpu.c                   |   4 +-
 sys/amd64/amd64/ksp_kpatch.c                | 170 ++++++++++++++++++++++++++++
 sys/amd64/amd64/machdep.c                   |   4 +
 sys/amd64/amd64/pmap.c                      |   2 +
 sys/amd64/amd64/support.S                   |  46 +++++++-
 sys/amd64/include/ksp_kpatch.h              |  58 ++++++++++
 sys/amd64/include/ksp_kpatch_asmacros.h     |  55 +++++++++
 sys/amd64/include/ksp_kpatch_common.h       |  40 +++++++
 sys/amd64/include/ksp_kpatch_instructions.h |  65 +++++++++++
 sys/amd64/include/ksp_kpatch_smap.h         |  69 +++++++++++
 sys/conf/files.amd64                        |   1 +
 sys/conf/ldscript.amd64                     |  12 ++
 sys/conf/options.amd64                      |   4 +
 sys/x86/include/specialreg.h                |   2 +
 15 files changed, 528 insertions(+), 7 deletions(-)
 create mode 100644 sys/amd64/amd64/ksp_kpatch.c
 create mode 100644 sys/amd64/include/ksp_kpatch.h
 create mode 100644 sys/amd64/include/ksp_kpatch_asmacros.h
 create mode 100644 sys/amd64/include/ksp_kpatch_common.h
 create mode 100644 sys/amd64/include/ksp_kpatch_instructions.h
 create mode 100644 sys/amd64/include/ksp_kpatch_smap.h

diff --git a/sys/amd64/amd64/identcpu.c b/sys/amd64/amd64/identcpu.c
index 2517498..fe977c5 100644
--- a/sys/amd64/amd64/identcpu.c
+++ b/sys/amd64/amd64/identcpu.c
@@ -393,6 +393,7 @@ printcpuinfo(void)
 				       "\010SMEP"
 				       "\012ENHMOVSB"
 				       "\013INVPCID"
+				       "\025SMAP"
 				       );
 			}
 
@@ -525,7 +526,7 @@ identify_cpu(void)
 		 */
 		if (cpu_feature2 & CPUID2_HV) {
 			cpu_stdext_disable = CPUID_STDEXT_FSGSBASE |
-			    CPUID_STDEXT_SMEP;
+			    CPUID_STDEXT_SMEP | CPUID_STDEXT_SMAP;
 		} else
 			cpu_stdext_disable = 0;
 		TUNABLE_INT_FETCH("hw.cpu_stdext_disable", &cpu_stdext_disable);
diff --git a/sys/amd64/amd64/initcpu.c b/sys/amd64/amd64/initcpu.c
index 4abed4c..210cbab1 100644
--- a/sys/amd64/amd64/initcpu.c
+++ b/sys/amd64/amd64/initcpu.c
@@ -165,13 +165,15 @@ initializecpu(void)
 		cr4 |= CR4_FSGSBASE;
 
 	/*
-	 * Postpone enabling the SMEP on the boot CPU until the page
+	 * Postpone enabling the SMEP and SMAP on the boot CPU until the page
 	 * tables are switched from the boot loader identity mapping
 	 * to the kernel tables.  The boot loader enables the U bit in
 	 * its tables.
 	 */
 	if (!IS_BSP() && (cpu_stdext_feature & CPUID_STDEXT_SMEP))
 		cr4 |= CR4_SMEP;
+	if (!IS_BSP() && (cpu_stdext_feature & CPUID_STDEXT_SMAP))
+		cr4 |= CR4_SMAP;
 	load_cr4(cr4);
 	if ((amd_feature & AMDID_NX) != 0) {
 		msr = rdmsr(MSR_EFER) | EFER_NXE;
diff --git a/sys/amd64/amd64/ksp_kpatch.c b/sys/amd64/amd64/ksp_kpatch.c
new file mode 100644
index 0000000..4dce844
--- /dev/null
+++ b/sys/amd64/amd64/ksp_kpatch.c
@@ -0,0 +1,170 @@
+/*-
+ * Copyright (c) 2013, by Oliver Pinter <oliver.pntr at gmail.com>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. The name of the developer may NOT be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ * $FreeBSD$
+ */
+
+#include <sys/cdefs.h>
+/* #include <sys/linker_set.h> */
+#include <sys/param.h>
+#include <sys/systm.h>
+
+#include <machine/cpufunc.h>
+#include <machine/ksp_kpatch.h>
+#include <machine/ksp_kpatch_common.h>
+#include <machine/ksp_kpatch_instructions.h>
+#include <machine/md_var.h>
+#include <machine/specialreg.h>
+
+const unsigned char intelnops[] = {
+	INTEL_NOP1,
+	INTEL_NOP2,
+	INTEL_NOP3,
+	INTEL_NOP4,
+	INTEL_NOP5,
+	INTEL_NOP6,
+	INTEL_NOP7,
+	INTEL_NOP8,
+	INTEL_NOP9
+};
+
+const unsigned char * const intel_nops[INTEL_NOP_MAX + 1] = {
+	NULL,
+	&intelnops[1],
+	&intelnops[2],
+	&intelnops[3],
+	&intelnops[4],
+	&intelnops[5],
+	&intelnops[6],
+	&intelnops[7],
+	&intelnops[8],
+	&intelnops[9]
+};
+
+extern struct ksp_kpatch  __start_set_ksp_kpatch_set[];
+extern struct ksp_kpatch  __stop_set_ksp_kpatch_set[];
+
+static void
+ksp_pad_with_nops(void *_buffer, unsigned int len)
+{
+	unsigned int	nop_len;
+	unsigned char	*buffer=_buffer;
+
+	while (len > 0) {
+		nop_len=(len > INTEL_NOP_MAX) ? INTEL_NOP_MAX : len;
+		memcpy(buffer, intel_nops[nop_len], nop_len);
+		buffer += nop_len;
+		len -= nop_len;
+	}
+}
+
+void
+ksp_kpatch_apply(struct ksp_kpatch *patch)
+{
+	__uint8_t		patch_buffer[KSP_KPATCH_MAXLEN];
+	int			patch_needed=0;
+
+	dprintf("ksp_kpatch: patch start at 0x%016lx\n", (long)patch);
+	dprintf("ksp_kpatch: patch_size: %d - patchable size: %d ...\n",
+				patch->patch_size, patch->patchable_size);
+	KASSERT(patch->patch_size == patch->patchable_size,
+				("ksp_kpatch: patch size > patchable size\n"));
+
+	switch (patch->feature_selector) {
+	case	CPU_FEATURE:
+			if ((cpu_feature & patch->feature_bit) != 0)
+				patch_needed=1;
+			break;
+	case	CPU_FEATURE2:
+			if ((cpu_feature2 & patch->feature_bit) != 0)
+				patch_needed=1;
+			break;
+	case	AMD_FEATURE:
+			if ((amd_feature & patch->feature_bit) != 0)
+				patch_needed=1;
+			break;
+	case	AMD_FEATURE2:
+			if ((amd_feature2 & patch->feature_bit) != 0)
+				patch_needed=1;
+			break;
+	case	VIA_FEATURE_RNG:
+			if ((via_feature_rng & patch->feature_bit) != 0)
+				patch_needed=1;
+			break;
+	case	VIA_FEATURE_XCRYPT:
+			if ((via_feature_xcrypt & patch->feature_bit) != 0)
+				patch_needed=1;
+			break;
+	case	CPU_STDEXT_FEATURE:
+			if ((cpu_stdext_feature & patch->feature_bit) != 0)
+				patch_needed=1;
+			break;
+	default:
+			dprintf("ksp_kpatch: no matching selector word\n");
+			patch_needed=0;
+			return;
+	}
+	if (patch_needed != 1) {
+		dprintf("ksp_kpatch: skipping patch at 0x%016lx", (long)patch);
+
+		return;
+	}
+
+	dprintf("ksp_kpatch: apply patch ...");
+	memcpy(patch_buffer, patch->patch_address, patch->patch_size);
+	ksp_pad_with_nops(patch_buffer,
+			patch->patchable_size-patch->patch_size);
+
+	/*
+	 * Write the previouly assembled instraction patch
+	 */
+	memcpy(patch->patchable_address, patch_buffer, patch->patchable_size);
+}
+
+void
+ksp_kpatch(void)
+{
+	struct ksp_kpatch	*patch, *start, *stop;
+	int			patch_count;
+
+	start=__start_set_ksp_kpatch_set;
+	stop=__stop_set_ksp_kpatch_set;
+
+	patch_count=stop-start;
+	if (patch_count == 0) {
+		dprintf("ksp_kpatch: no patches\n");
+		dprintf("ksp_kpatch: skip kernel patching\n");
+
+		return;
+	}
+	dprintf("ksp_kpatch: patch count	: %d\n", patch_count);
+	dprintf("ksp_kpatch: patch set start	: 0x%016lx\n", (long)start);
+	dprintf("ksp_kpatch: patch set end  	: 0x%016lx\n", (long)stop);
+	for (patch=start; patch<stop; patch++) {
+		dprintf("ksp_kpatch_set: try patch at 0x%016lx\n",
+								(long)patch);
+		ksp_kpatch_apply(patch);
+	}
+}
+
diff --git a/sys/amd64/amd64/machdep.c b/sys/amd64/amd64/machdep.c
index f5e1437..0e1afa1 100644
--- a/sys/amd64/amd64/machdep.c
+++ b/sys/amd64/amd64/machdep.c
@@ -115,6 +115,7 @@ __FBSDID("$FreeBSD$");
 #include <machine/clock.h>
 #include <machine/cpu.h>
 #include <machine/cputypes.h>
+#include <machine/ksp_kpatch.h>
 #include <machine/intr_machdep.h>
 #include <x86/mca.h>
 #include <machine/md_var.h>
@@ -1800,6 +1801,9 @@ hammer_time(u_int64_t modulep, u_int64_t physfree)
 	initializecpu();	/* Initialize CPU registers */
 	initializecpucache();
 
+	/* patching kernel text for new instructions */
+	ksp_kpatch();
+
 	/* doublefault stack space, runs on ist1 */
 	common_tss[0].tss_ist1 = (long)&dblfault_stack[sizeof(dblfault_stack)];
 
diff --git a/sys/amd64/amd64/pmap.c b/sys/amd64/amd64/pmap.c
index 1b1c86c..b5b57fe 100644
--- a/sys/amd64/amd64/pmap.c
+++ b/sys/amd64/amd64/pmap.c
@@ -664,6 +664,8 @@ pmap_bootstrap(vm_paddr_t *firstaddr)
 	load_cr3(KPML4phys);
 	if (cpu_stdext_feature & CPUID_STDEXT_SMEP)
 		load_cr4(rcr4() | CR4_SMEP);
+	if (cpu_stdext_feature & CPUID_STDEXT_SMAP)
+		load_cr4(rcr4() | CR4_SMAP);
 
 	/*
 	 * Initialize the kernel pmap (which is statically allocated).
diff --git a/sys/amd64/amd64/support.S b/sys/amd64/amd64/support.S
index fed852c..af3a1ee 100644
--- a/sys/amd64/amd64/support.S
+++ b/sys/amd64/amd64/support.S
@@ -33,6 +33,7 @@
 #include "opt_ddb.h"
 
 #include <machine/asmacros.h>
+#include <machine/ksp_kpatch_smap.h>
 #include <machine/intr_machdep.h>
 #include <machine/pmap.h>
 
@@ -59,7 +60,7 @@ ENTRY(bzero)
 	stosb
 	ret
 END(bzero)
-	
+
 /* Address: %rdi */
 ENTRY(pagezero)
 	movq	$-PAGE_SIZE,%rdx
@@ -137,7 +138,7 @@ ENTRY(bcopy)
 	cld
 	ret
 END(bcopy)
-	
+
 /*
  * Note: memcpy does not support overlapping copies
  */
@@ -181,10 +182,10 @@ ENTRY(pagecopy)
 	ret
 END(pagecopy)
 
-/* fillw(pat, base, cnt) */  
+/* fillw(pat, base, cnt) */
 /*       %rdi,%rsi, %rdx */
 ENTRY(fillw)
-	movq	%rdi,%rax   
+	movq	%rdi,%rax
 	movq	%rsi,%rdi
 	movq	%rdx,%rcx
 	cld
@@ -244,12 +245,16 @@ ENTRY(copyout)
 
 	shrq	$3,%rcx
 	cld
+	_ksp_kpatch_stac
 	rep
 	movsq
+	_ksp_kpatch_clac
 	movb	%dl,%cl
 	andb	$7,%cl
+	_ksp_kpatch_stac
 	rep
 	movsb
+	_ksp_kpatch_clac
 
 done_copyout:
 	xorl	%eax,%eax
@@ -259,6 +264,7 @@ done_copyout:
 
 	ALIGN_TEXT
 copyout_fault:
+	_ksp_kpatch_clac
 	movq	PCPU(CURPCB),%rdx
 	movq	$0,PCB_ONFAULT(%rdx)
 	movq	$EFAULT,%rax
@@ -290,12 +296,16 @@ ENTRY(copyin)
 	movb	%cl,%al
 	shrq	$3,%rcx				/* copy longword-wise */
 	cld
+	_ksp_kpatch_stac
 	rep
 	movsq
+	_ksp_kpatch_clac
 	movb	%al,%cl
 	andb	$7,%cl				/* copy remaining bytes */
+	_ksp_kpatch_stac
 	rep
 	movsb
+	_ksp_kpatch_clac
 
 done_copyin:
 	xorl	%eax,%eax
@@ -305,6 +315,7 @@ done_copyin:
 
 	ALIGN_TEXT
 copyin_fault:
+	_ksp_kpatch_clac
 	movq	PCPU(CURPCB),%rdx
 	movq	$0,PCB_ONFAULT(%rdx)
 	movq	$EFAULT,%rax
@@ -324,10 +335,12 @@ ENTRY(casuword32)
 	ja	fusufault
 
 	movl	%esi,%eax			/* old */
+	_ksp_kpatch_stac
 #ifdef SMP
 	lock
 #endif
 	cmpxchgl %edx,(%rdi)			/* new = %edx */
+	_ksp_kpatch_clac
 
 	/*
 	 * The old value is in %eax.  If the store succeeded it will be the
@@ -353,10 +366,12 @@ ENTRY(casuword)
 	ja	fusufault
 
 	movq	%rsi,%rax			/* old */
+	_ksp_kpatch_stac
 #ifdef SMP
 	lock
 #endif
 	cmpxchgq %rdx,(%rdi)			/* new = %rdx */
+	_ksp_kpatch_clac
 
 	/*
 	 * The old value is in %eax.  If the store succeeded it will be the
@@ -385,10 +400,12 @@ ENTRY(fuword)
 	cmpq	%rax,%rdi			/* verify address is valid */
 	ja	fusufault
 
+	_ksp_kpatch_stac
 	movq	(%rdi),%rax
+	_ksp_kpatch_clac
 	movq	$0,PCB_ONFAULT(%rcx)
 	ret
-END(fuword64)	
+END(fuword64)
 END(fuword)
 
 ENTRY(fuword32)
@@ -399,7 +416,9 @@ ENTRY(fuword32)
 	cmpq	%rax,%rdi			/* verify address is valid */
 	ja	fusufault
 
+	_ksp_kpatch_stac
 	movl	(%rdi),%eax
+	_ksp_kpatch_clac
 	movq	$0,PCB_ONFAULT(%rcx)
 	ret
 END(fuword32)
@@ -426,7 +445,9 @@ ENTRY(fuword16)
 	cmpq	%rax,%rdi
 	ja	fusufault
 
+	_ksp_kpatch_stac
 	movzwl	(%rdi),%eax
+	_ksp_kpatch_clac
 	movq	$0,PCB_ONFAULT(%rcx)
 	ret
 END(fuword16)
@@ -439,13 +460,16 @@ ENTRY(fubyte)
 	cmpq	%rax,%rdi
 	ja	fusufault
 
+	_ksp_kpatch_stac
 	movzbl	(%rdi),%eax
+	_ksp_kpatch_clac
 	movq	$0,PCB_ONFAULT(%rcx)
 	ret
 END(fubyte)
 
 	ALIGN_TEXT
 fusufault:
+	_ksp_kpatch_clac
 	movq	PCPU(CURPCB),%rcx
 	xorl	%eax,%eax
 	movq	%rax,PCB_ONFAULT(%rcx)
@@ -466,7 +490,9 @@ ENTRY(suword)
 	cmpq	%rax,%rdi			/* verify address validity */
 	ja	fusufault
 
+	_ksp_kpatch_stac
 	movq	%rsi,(%rdi)
+	_ksp_kpatch_clac
 	xorl	%eax,%eax
 	movq	PCPU(CURPCB),%rcx
 	movq	%rax,PCB_ONFAULT(%rcx)
@@ -482,7 +508,9 @@ ENTRY(suword32)
 	cmpq	%rax,%rdi			/* verify address validity */
 	ja	fusufault
 
+	_ksp_kpatch_stac
 	movl	%esi,(%rdi)
+	_ksp_kpatch_clac
 	xorl	%eax,%eax
 	movq	PCPU(CURPCB),%rcx
 	movq	%rax,PCB_ONFAULT(%rcx)
@@ -497,7 +525,9 @@ ENTRY(suword16)
 	cmpq	%rax,%rdi			/* verify address validity */
 	ja	fusufault
 
+	_ksp_kpatch_stac
 	movw	%si,(%rdi)
+	_ksp_kpatch_clac
 	xorl	%eax,%eax
 	movq	PCPU(CURPCB),%rcx		/* restore trashed register */
 	movq	%rax,PCB_ONFAULT(%rcx)
@@ -513,7 +543,9 @@ ENTRY(subyte)
 	ja	fusufault
 
 	movl	%esi,%eax
+	_ksp_kpatch_stac
 	movb	%al,(%rdi)
+	_ksp_kpatch_clac
 	xorl	%eax,%eax
 	movq	PCPU(CURPCB),%rcx		/* restore trashed register */
 	movq	%rax,PCB_ONFAULT(%rcx)
@@ -555,7 +587,9 @@ ENTRY(copyinstr)
 	decq	%rdx
 	jz	3f
 
+	_ksp_kpatch_stac
 	lodsb
+	_ksp_kpatch_clac
 	stosb
 	orb	%al,%al
 	jnz	2b
@@ -584,7 +618,9 @@ cpystrflt_x:
 	testq	%r9,%r9
 	jz	1f
 	subq	%rdx,%r8
+	_ksp_kpatch_stac
 	movq	%r8,(%r9)
+	_ksp_kpatch_clac
 1:
 	ret
 END(copyinstr)
diff --git a/sys/amd64/include/ksp_kpatch.h b/sys/amd64/include/ksp_kpatch.h
new file mode 100644
index 0000000..fb7b099
--- /dev/null
+++ b/sys/amd64/include/ksp_kpatch.h
@@ -0,0 +1,58 @@
+/*-
+ * Copyright (c) 2013, by Oliver Pinter <oliver.pntr at gmail.com>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. The name of the developer may NOT be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ * $FreeBSD$
+ */
+
+#include "opt_ksp.h"
+
+#ifndef	__KSP_KPATCH_H
+#define	__KSP_KPATCH_H
+
+#include <sys/types.h> /* this included cdefs.h too */
+/* #include <sys/linker_set.h> */
+
+#include <machine/ksp_kpatch_common.h>
+
+#ifdef	KSP_KPATCH_DEBUG
+#define	dprintf	printf
+#else	/* KSP_KPATCH_DEBUG */
+#define	dprintf(args...)
+#endif	/* KSP_KPATCH_DEBUG */
+
+struct ksp_kpatch {
+	char	*patchable_address;	/* 64 bit */
+	char	*patch_address;		/* 64 bit */
+	u_int	feature_bit;		/* 32 bit */
+	u_short	feature_selector;	/* 16 bit */
+	u_char	patchable_size;		/*  8 bit */
+	u_char	patch_size;		/*  8 bit */
+};
+
+#define	KSP_KPATCH_MAXLEN	256	/* 8 bit */
+
+extern void ksp_kpatch(void);
+extern void ksp_kpatch_apply(struct ksp_kpatch *patch);
+
+#endif	/* __KSP_KPATCH_H */
diff --git a/sys/amd64/include/ksp_kpatch_asmacros.h b/sys/amd64/include/ksp_kpatch_asmacros.h
new file mode 100644
index 0000000..825d787
--- /dev/null
+++ b/sys/amd64/include/ksp_kpatch_asmacros.h
@@ -0,0 +1,55 @@
+/*-
+ * Copyright (c) 2013, by Oliver Pinter <oliver.pntr at gmail.com>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. The name of the developer may NOT be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ * $FreeBSD$
+ */
+
+#ifndef	__KSP_KPATCH_ASMACROS_H
+#define	__KSP_KPATCH_ASMACROS_H
+
+#include <sys/cdefs.h>
+
+#include <machine/ksp_kpatch_common.h>
+#include <machine/ksp_kpatch_instructions.h>
+#include <machine/specialreg.h>
+
+#define	KSP_KPATCH(patchable, patch, feature_bit, selector)		\
+89071:									\
+	patchable ;		/* patchable opcodes */			\
+89072:									\
+	.pushsection set_ksp_kpatch_set, "a" ;				\
+		.quad	89701b ;		/* &patchable */	\
+		.quad	89073f ;		/* &patch */		\
+		.int	feature_bit ;		/* feature_bit*/	\
+		.word	selector ;					\
+		.byte	89072b-89071b ;					\
+		.byte	89074f-89073f ;					\
+	.popsection ;							\
+	.pushsection set_ksp_kpatch_patch_set, "ax" ;			\
+89073:									\
+		patch ;		/* opcode paches */			\
+89074:									\
+	.popsection
+
+#endif	/* __KSP_KPATCH_ASMACROS_H */
diff --git a/sys/amd64/include/ksp_kpatch_common.h b/sys/amd64/include/ksp_kpatch_common.h
new file mode 100644
index 0000000..7d90e11
--- /dev/null
+++ b/sys/amd64/include/ksp_kpatch_common.h
@@ -0,0 +1,40 @@
+/*-
+ * Copyright (c) 2013, by Oliver Pinter <oliver.pntr at gmail.com>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. The name of the developer may NOT be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ * $FreeBSD$
+ */
+
+#ifndef	__KSP_KPATCH_COMMON_H
+#define	__KSP_KPATCH_COMMON_H
+
+#define	KSP_HACK		0
+#define	CPU_FEATURE		1
+#define	CPU_FEATURE2		2
+#define	AMD_FEATURE		3
+#define	AMD_FEATURE2		4
+#define	VIA_FEATURE_RNG		5
+#define	VIA_FEATURE_XCRYPT	6
+#define	CPU_STDEXT_FEATURE	7
+
+#endif	/* __KSP_KPATCH_COMMON_H */
diff --git a/sys/amd64/include/ksp_kpatch_instructions.h b/sys/amd64/include/ksp_kpatch_instructions.h
new file mode 100644
index 0000000..1125267
--- /dev/null
+++ b/sys/amd64/include/ksp_kpatch_instructions.h
@@ -0,0 +1,65 @@
+/*-
+ * Copyright (c) 2013, by Oliver Pinter <oliver.pntr at gmail.com>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. The name of the developer may NOT be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ * $FreeBSD$
+ */
+
+#ifndef __KSP_KPATCH_INSTRUCTIONS_H
+#define	__KSP_KPATCH_INSTRUCTIONS_H
+
+/*
+ * Intel Instruction Set Reference M-Z
+ * Table 4-12. recommended Multi-Byte Sequeance of NOP Instruction
+ */
+#define	INTEL_NOP1	0x90
+#define	INTEL_NOP2	0x66,0x90
+#define	INTEL_NOP3	0x0f,0x1f,0x00
+#define	INTEL_NOP4	0x0f,0x1f,0x40,0x00
+#define	INTEL_NOP5	0x0f,0x1f,0x44,0x00,0x00
+#define	INTEL_NOP6	0x66,0x0f,0x1f,0x44,0x00,0x00
+#define	INTEL_NOP7	0x0f,0x1f,0x80,0x00,0x00,0x00,0x00
+#define	INTEL_NOP8	0x0f,0x1f,0x84,0x00,0x00,0x00,0x00,0x00
+#define	INTEL_NOP9	0x66,0x0f,0x1f,0x84,0x00,0x00,0x00,0x00,0x00
+
+#define	INTEL_NOP_MAX	9
+
+#define	INTEL_CLAC	0x0f,0x01,0xca
+#define	INTEL_STAC	0x0f,0x01,0xcb
+
+#define	__ASM_MK(_O)	.byte _O
+
+#define	ASM_INTEL_NOP1	__ASM_MK(INTEL_NOP1)
+#define	ASM_INTEL_NOP2	__ASM_MK(INTEL_NOP2)
+#define	ASM_INTEL_NOP3	__ASM_MK(INTEL_NOP3)
+#define	ASM_INTEL_NOP4	__ASM_MK(INTEL_NOP4)
+#define	ASM_INTEL_NOP5	__ASM_MK(INTEL_NOP5)
+#define	ASM_INTEL_NOP6	__ASM_MK(INTEL_NOP6)
+#define	ASM_INTEL_NOP7	__ASM_MK(INTEL_NOP7)
+#define	ASM_INTEL_NOP8	__ASM_MK(INTEL_NOP8)
+#define	ASM_INTEL_NOP9	__ASM_MK(INTEL_NOP9)
+
+#define	ASM_INTEL_CLAC	__ASM_MK(INTEL_CLAC)
+#define	ASM_INTEL_STAC	__ASM_MK(INTEL_STAC)
+
+#endif	/* __KSP_KPATCH_INSTRUCTIONS_H */
diff --git a/sys/amd64/include/ksp_kpatch_smap.h b/sys/amd64/include/ksp_kpatch_smap.h
new file mode 100644
index 0000000..dd5a609
--- /dev/null
+++ b/sys/amd64/include/ksp_kpatch_smap.h
@@ -0,0 +1,69 @@
+/*-
+ * Copyright (c) 2013, by Oliver Pinter <oliver.pntr at gmail.com>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. The name of the developer may NOT be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ * $FreeBSD$
+ */
+
+#ifndef	__KSP_KPATCH_SMAP_H
+#define	__KSP_KPATCH_SMAP_H
+
+#include <machine/ksp_kpatch_asmacros.h>
+
+#define	_ksp_kpatch_clac						\
+89071:									\
+	.byte 0x0f,0x1f,0x00 ;			/* patchable - nop */	\
+89072:									\
+	.pushsection set_ksp_kpatch_set, "a" ;				\
+		.quad	89071b ;		/* &patchable */	\
+		.quad	89073f ;		/* &patch */		\
+		.int	CPUID_STDEXT_SMAP ;	/* feature_bit*/	\
+		.word	CPU_STDEXT_FEATURE ;				\
+		.byte	89072b-89071b ;					\
+		.byte	89074f-89073f ;					\
+	.popsection ;							\
+	.pushsection set_ksp_kpatch_patch_set, "ax" ;			\
+89073:									\
+		.byte 0x0f,0x01,0xca ;		/* patch - clac */	\
+89074:									\
+	.popsection
+
+#define	_ksp_kpatch_stac						\
+89071:									\
+	.byte 0x0f,0x1f,0x00 ;			/* patchable - nop */	\
+89072:									\
+	.pushsection set_ksp_kpatch_set, "a" ;				\
+		.quad	89071b ;		/* &patchable */	\
+		.quad	89073f ;		/* &patch */		\
+		.int	CPUID_STDEXT_SMAP ;	/* feature_bit*/	\
+		.word	CPU_STDEXT_FEATURE ;				\
+		.byte	89072b-89071b ;					\
+		.byte	89074f-89073f ;					\
+	.popsection ;							\
+	.pushsection set_ksp_kpatch_patch_set, "ax" ;			\
+89073:									\
+		.byte 0x0f,0x01,0xcb ;		/* patch - stac */	\
+89074:									\
+	.popsection
+
+#endif	/* __KSP_KPATCH_SMAP_H */
diff --git a/sys/conf/files.amd64 b/sys/conf/files.amd64
index 5e659b9..1d20529 100644
--- a/sys/conf/files.amd64
+++ b/sys/conf/files.amd64
@@ -111,6 +111,7 @@ amd64/amd64/identcpu.c		standard
 amd64/amd64/in_cksum.c		optional	inet | inet6
 amd64/amd64/initcpu.c		standard
 amd64/amd64/io.c		optional	io
+amd64/amd64/ksp_kpatch.c	standard
 amd64/amd64/locore.S		standard	no-obj
 amd64/amd64/machdep.c		standard
 amd64/amd64/mem.c		optional	mem
diff --git a/sys/conf/ldscript.amd64 b/sys/conf/ldscript.amd64
index 9210a73..3f22e63 100644
--- a/sys/conf/ldscript.amd64
+++ b/sys/conf/ldscript.amd64
@@ -67,6 +67,18 @@ SECTIONS
   PROVIDE (__etext = .);
   PROVIDE (_etext = .);
   PROVIDE (etext = .);
+  set_ksp_kpatch_set	:
+  {
+    PROVIDE ( __start_set_ksp_kpatch_set = . );
+    KEEP (*(set_ksp_kpatch_set));
+    PROVIDE ( __stop_set_ksp_kpatch_set = . );
+  }
+  set_ksp_kpatch_patch_set	:
+  {
+    PROVIDE ( __start_set_ksp_kpatch_patch_set = . );
+    KEEP (*(set_ksp_kpatch_patch_set));
+    PROVIDE ( __stop_set_ksp_kpatch_patch_set = . );
+  }
   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
   .rodata1        : { *(.rodata1) }
   .eh_frame_hdr : { *(.eh_frame_hdr) }
diff --git a/sys/conf/options.amd64 b/sys/conf/options.amd64
index 90348b7..03d9bed 100644
--- a/sys/conf/options.amd64
+++ b/sys/conf/options.amd64
@@ -72,3 +72,7 @@ ISCI_LOGGING	opt_isci.h
 # hw random number generators for random(4)
 PADLOCK_RNG		opt_cpu.h
 RDRAND_RNG		opt_cpu.h
+
+# ksp kpatch
+KSP_KPATCH_DEBUG	opt_ksp.h
+
diff --git a/sys/x86/include/specialreg.h b/sys/x86/include/specialreg.h
index dbf9ba0..203e4ec 100644
--- a/sys/x86/include/specialreg.h
+++ b/sys/x86/include/specialreg.h
@@ -73,6 +73,7 @@
 #define	CR4_PCIDE 0x00020000	/* Enable Context ID */
 #define	CR4_XSAVE 0x00040000	/* XSETBV/XGETBV */
 #define	CR4_SMEP 0x00100000	/* Supervisor-Mode Execution Prevention */
+#define	CR4_SMAP 0x00200000	/* Supervisor-Mode Access Prevention */
 
 /*
  * Bits in AMD64 special registers.  EFER is 64 bits wide.
@@ -283,6 +284,7 @@
 #define	CPUID_STDEXT_SMEP	0x00000080
 #define	CPUID_STDEXT_ENH_MOVSB	0x00000200
 #define	CPUID_STDEXT_INVPCID	0x00000400
+#define	CPUID_STDEXT_SMAP	0x00100000
 
 /*
  * CPUID manufacturers identifiers
-- 
1.8.2

